

- block:
  - name: "create required folders"
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - "{{ haproxy_global_chroot }}/.well-known/acme-challenge"
      - /etc/ssl/letsencrypt
      - /etc/ssl/private
      - /etc/ssl/crt
      - /etc/ssl/csr
      - /etc/ssl/pem
    tags: [ haproxy-letsencrypt ]

  - name: "Generate Let's Encrypt Account Key"
    openssl_privatekey: 
      path=/etc/ssl/letsencrypt/account.key
      state=present
    tags: [ haproxy-letsencrypt ]

  - name: "Search for SSL .key files" 
    stat: 
      path: "/etc/ssl/private/{{ item }}.key"
    with_items:
      - "{{ letsencrypt_ssl_domains }}"
    register: stat_keys
    tags: [ haproxy-letsencrypt ]

  - name: "Generate SSL private Key"
    openssl_privatekey: 
      path=/etc/ssl/private/{{ item.item }}.key
      state=present
    with_items: "{{ stat_keys.results }}"
    when: not item.stat.exists
    tags: [ haproxy-letsencrypt ]

  - name: "Search for SSL .csr files"
    stat: 
      path: "/etc/ssl/csr/{{ item }}.csr"
    with_items:
      - "{{ letsencrypt_ssl_domains }}"
    register: stat_csr
    tags: [ haproxy-letsencrypt ]

  - name: "Generate SSL Certificate Requests"
    openssl_csr: 
      commonName={{ item.item }}
      path=/etc/ssl/csr/{{ item.item }}.csr
      privatekey_path=/etc/ssl/private/{{ item.item }}.key
      countryName={{ letsencrypt_ssl_countryName }}
      organizationName={{ letsencrypt_ssl_organizationName }}
      emailAddress={{ letsencrypt_ssl_emailAddress }}
    with_items: "{{ stat_csr.results }}"
    when: not item.stat.exists
    tags: [ haproxy-letsencrypt ]

  - name: "Request Let's Encrypt Certificate from {{ letsencrypt_directory }}"
    letsencrypt:
      account_email: "{{ letsencrypt_account_email }}"
      account_key: /etc/ssl/letsencrypt/account.key
      csr: /etc/ssl/csr/{{ item }}.csr
      dest: /etc/ssl/crt/{{ item }}.crt
      acme_directory: "{{ letsencrypt_directory }}"
    with_items:
      - "{{ letsencrypt_ssl_domains }}"
    register: letsencrypt_challenge
    tags: [ haproxy-letsencrypt ]

  - name: "Write challenge data to webdir"
    copy:
      dest={{ haproxy_global_chroot }}/{{ item['challenge_data'][item.item]['http-01']['resource'] }}
      content={{ item['challenge_data'][item.item]['http-01']['resource_value'] }}
    with_items: "{{ letsencrypt_challenge.results }}"
    when: item.changed is defined and item.changed == True
    tags: [ haproxy-letsencrypt ]

  - name: "Install Let's Encrypt Certificate from {{ letsencrypt_directory }}"
    letsencrypt:
      account_email: "{{ letsencrypt_account_email }}"
      account_key: /etc/ssl/letsencrypt/account.key
      csr: /etc/ssl/csr/{{ item.item }}.csr
      dest: /etc/ssl/crt/{{ item.item }}.crt
      data: "{{ item }}"
      acme_directory: "{{ letsencrypt_directory }}"
    with_items: "{{ letsencrypt_challenge.results }}"
    tags: [ haproxy-letsencrypt ]

  - name: "Remove callenge data from webdir"
    file: path={{ haproxy_global_chroot }}/{{ item['challenge_data'][item.item]['http-01']['resource'] }} state=absent
    with_items: "{{ letsencrypt_challenge.results }}"
    when: item.changed is defined and item.changed == True
    tags: [ haproxy-letsencrypt ]

  - name: "Download Let's Encrypt Chain file"
    get_url:
      url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
      dest: /etc/ssl/letsencrypt/lets-encrypt-x3-cross-signed.pem
    tags: [ haproxy-letsencrypt ]

  - name: "Generate a PEM file from .key and .crt and chain file"
    shell: cat crt/{{ item }}.crt private/{{ item }}.key letsencrypt/lets-encrypt-x3-cross-signed.pem > pem/{{ item }}.pem
    args:
      chdir: "/etc/ssl/"
    with_items:
      - "{{ letsencrypt_ssl_domains }}"
    notify: reload haproxy
    tags: [ haproxy-letsencrypt ]

  - name: "Generate a crt-list.txt file for SSL SNI"
    template:
      src: etc/haproxy/crt-list.txt.j2
      dest: /etc/haproxy/crt-list.txt

  - name: "Create bind_ssl variable for haproxy.cfg"
    set_fact:
      letsencrypt_bind_ssl: "ssl crt-list /etc/haproxy/crt-list.txt"

  - name: "Configuring HAproxy with Let's Encrypt SSL"
    template:
      src=etc/haproxy/haproxy.cfg.j2
      dest=/etc/haproxy/haproxy.cfg
      validate='haproxy -f %s -c'
    notify: reload haproxy

